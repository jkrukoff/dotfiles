#!/usr/bin/env bash

# Created by argbash-init v2.8.1
# Rearrange the order of options below according to what you would like to see
# in the help message.
# ARG_OPTIONAL_SINGLE([refresh],[r],[credential refresh interval (in minutes)],[0])
# ARG_OPTIONAL_SINGLE([region],[],[default AWS region for profile],[us-east-1])
# ARG_OPTIONAL_BOOLEAN([verbose],[v],[enable verbose output],[off])
# ARG_POSITIONAL_SINGLE([profile],[credential profile name to replace],[])
# ARG_POSITIONAL_SINGLE([instance],[name of the server to retrieve instance credentials from],[])
# ARG_POSITIONAL_SINGLE([role],[name of the instance role],[])
# ARG_HELP([Retrieve AWS credentials from an instance and insert into local credentials.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# # When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die() {
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option() {
  local first_option all_short_options='rvh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_refresh="0"
_arg_region="us-east-1"
_arg_verbose="off"

# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help() {
  printf '%s\n' "Retrieve AWS credentials from an instance and insert into local credentials."
  printf 'Usage: %s [-r|--refresh <arg>] [--region <arg>] [-v|--(no-)verbose] [-h|--help] <profile> <instance> <role>\n' "$0"
  printf '\t%s\n' "<profile>: credential profile name to replace"
  printf '\t%s\n' "<instance>: name of the server to retrieve instance credentials from"
  printf '\t%s\n' "<role>: name of the instance role"
  printf '\t%s\n' "-r, --refresh: credential refresh interval (in minutes) (default: '0')"
  printf '\t%s\n' "--region: default AWS region for profile (default: 'us-east-1')"
  printf '\t%s\n' "-v, --verbose, --no-verbose: enable verbose output (off by default)"
  printf '\t%s\n' "-h, --help: Prints help"
}

# The parsing of the command-line
parse_commandline() {
  _positionals_count=0
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
      # We support whitespace as a delimiter between option argument and its value.
      # Therefore, we expect the --refresh or -r value.
      # so we watch for --refresh and -r.
      # Since we know that we got the long or short option,
      # we just reach out for the next argument to get the value.
      -r | --refresh)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_refresh="$2"
        shift
        ;;
      # We support the = as a delimiter between option argument and its value.
      # Therefore, we expect --refresh=value, so we watch for --refresh=*
      # For whatever we get, we strip '--refresh=' using the ${var##--refresh=} notation
      # to get the argument value
      --refresh=*)
        _arg_refresh="${_key##--refresh=}"
        ;;
      # We support getopts-style short arguments grouping,
      # so as -r accepts value, we allow it to be appended to it, so we watch for -r*
      # and we strip the leading -r from the argument string using the ${var##-r} notation.
      -r*)
        _arg_refresh="${_key##-r}"
        ;;
      # See the comment of option '--refresh' to see what's going on here - principle is the same.
      --region)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_region="$2"
        shift
        ;;
      # See the comment of option '--refresh=' to see what's going on here - principle is the same.
      --region=*)
        _arg_region="${_key##--region=}"
        ;;
      # The verbose argurment doesn't accept a value,
      # we expect the --verbose or -v, so we watch for them.
      -v | --no-verbose | --verbose)
        _arg_verbose="on"
        test "${1:0:5}" = "--no-" && _arg_verbose="off"
        ;;
      # We support getopts-style short arguments clustering,
      # so as -v doesn't accept value, other short options may be appended to it, so we watch for -v*.
      # After stripping the leading -v from the argument, we have to make sure
      # that the first character that follows coresponds to a short option.
      -v*)
        _arg_verbose="on"
        _next="${_key##-v}"
        if test -n "$_next" -a "$_next" != "$_key"; then
          { begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      # See the comment of option '--verbose' to see what's going on here - principle is the same.
      -h | --help)
        print_help
        exit 0
        ;;
      # See the comment of option '-v' to see what's going on here - principle is the same.
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}

# Check that we receive expected amount positional arguments.
# Return 0 if everything is OK, 1 if we have too little arguments
# and 2 if we have too much arguments
handle_passed_args_count() {
  local _required_args_string="'profile', 'instance' and 'role'"
  test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args() {
  local _positional_name _shift_for=$1
  # We have an array of variables to which we want to save positional args values.
  # This array is able to hold array elements as targets.
  # As variables don't contain spaces, they may be held in space-separated string.
  _positional_names="_arg_profile _arg_instance _arg_role "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}; do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -euo pipefail
IFS=$'\n\t'

function update_aws_credentials() {
  local security_credentials
  security_credentials="$(ssh "${_arg_instance}" "curl 'http://169.254.169.254/latest/meta-data/iam/security-credentials/${_arg_role}'" 2> /dev/null)"

  local aws_access_key_id
  local aws_secret_access_key
  local aws_session_token
  aws_access_key_id="$(jq -r '.AccessKeyId' <<< "${security_credentials}")"
  aws_secret_access_key="$(jq -r '.SecretAccessKey' <<< "${security_credentials}")"
  aws_session_token="$(jq -r '.Token' <<< "${security_credentials}")"

  crudini --merge ~/.aws/credentials << EOF
[${_arg_profile}]
region = ${_arg_region}
aws_access_key_id = ${aws_access_key_id}
aws_secret_access_key = ${aws_secret_access_key}
aws_session_token = ${aws_session_token}
EOF
  if [ "${_arg_verbose}" = on ]; then
    echo "AWS profile ${_arg_profile} credentials updated: $(date)" 1>&2
  fi
}

if [ "${_arg_refresh}" = 0 ]; then
  update_aws_credentials
else
  while true; do
    update_aws_credentials
    sleep "${_arg_refresh}"m
  done
fi
# ] <-- needed because of Argbash
